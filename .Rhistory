first
second
third
x = 10
x++
x
x--
x
x
x <- 10
x <- x + 1
x < x * 5 + 1
x <- 10
x <- x + 1
x <- x * 5 + 1
x <- 10
x <- x + 1
x <- x * 5 + 1
x
first <- c(1:10)
first
##  [1]  1  2  3  4  5  6  7  8  9 10
first <- c(1:10)
first
##  [1]  1  2  3  4  5  6  7  8  9 10
second <- seq(from = 0, to = 100, by = 10)
second
##  [1]   0  10  20  30  40  50  60  70  80  90 100
third <- rep(x = seq(from = 1, to = 9, by = 2), each = 10)
third
##  [1] 1 1 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 3 3 5 5 5 5 5 5 5 5 5 5 7 7 7 7 7 7 7 7
## [39] 7 7 9 9 9 9 9 9 9 9 9 9
plot(1:10, xlab = "x", ylab = "y")
plot(1:10, xlab = "x", ylab = "y", main = "my graph")
plot(1:10, xlab = "x", ylab = "y", main = "my graph", color = 'red')
plot(1:10, xlab = "x", ylab = "y", main = "my graph", col = 'red')
warnings()
plot(1:10, xlab = "x", ylab = "y", main = "my graph", col = "red")
plot(1:10, xlab = "x", ylab = "y", main = "my graph", col = 'red')
x <- sample(1:10, size = 10)
x
x <- sample(1:10, size = 10, prob = .5)
x <- sample(1:10, size = 10, prob = 50%)
x <- sample(1:10, size = 10, prob = 0.5)
x <- sample(1:10, size = 10, prob = 2)
x <- sample(1:10, size = 5)
x
x <- sample(1:10)
x
x <- sample(1:10, size = 20)
x <- sample(1:10, size = 8)
x
y <- sample(1:10, size = 8)
plot(x = x, y = y)
lm <- lml(x, y)
lml <- lm(x, y)
?lm
?plot
x <-sample(1:10, size = 10, replace = TRUE)
X
x
y <-sample(1:10, size = 10, replace = TRUE)
y
plot(x, y)
a<- rnorm(100)
a
a = rnorm(10)
a
b = rnrom(10)
b = rnorm(10)
plot(a, b)
x <- sample(1:10, size = 10, replace = TRUE)
y <- sample(1:10, size = 10, replace = TRUE)
plot(x = x, y = y, main = "My Graph", xlim = "x-axis", ylim = "y-axis")
x <- sample(1:10, size = 10, replace = TRUE)
y <- sample(1:10, size = 10, replace = TRUE)
plot(x = x, y = y, main = "My Graph", xlab = "x-axis", ylab = "y-axis")
x <- sample(1:10, size = 10, replace = TRUE)
y <- sample(1:10, size = 10, replace = TRUE)
plot(x = x, y = y, main = "My Graph", xlab = "x-axis", ylab = "y-axis", col = "red", cex = 3)
x <- sample(1:10, size = 10, replace = TRUE)
y <- sample(1:10, size = 10, replace = TRUE)
plot(x = x, y = y, main = "My Graph", xlab = "x-axis", ylab = "y-axis", col = "red", cex = 1)
x <- sample(1:10, size = 10, replace = TRUE)
y <- sample(1:10, size = 10, replace = TRUE)
plot(x = x, y = y, main = "My Graph", xlab = "x-axis", ylab = "y-axis", col = "red", cex = 2)
x <- sample(1:10, size = 10, replace = TRUE)
y <- sample(1:10, size = 10, replace = TRUE)
plot(x = x, y = y, main = "My Graph", xlab = "x-axis", ylab = "y-axis", col = "red")
f <- numeric(10)
f
f[1] <- f[2] <- 1
for(i in 3:10) {}
for(i in 3:10) {
f[i] <- f[i - 2] + f[i - 1]
}
f
t
c
s
s[1] <- s[2] <- 1
s[1] <- 1
## will print fibonacci number
f <- numeric(10)
f[1] <- 1
f[2] <- 1
for(i in 3:10) {
f[i] <- f[i - 2] + f[i - 1]
}
f
data <- faithful[1:4, ]
knitr::kable(data, caption = "Table with kable")
View(data)
help.start()
getwd()
setwd()
library('lm')
library(lm)
install.packages("lm")
library('lm')
help.start()
install.packages("vcd")
help(package = "vcd")
help("vcd")
library(vcd)
help("Arthritis")
Arthritis
summary(Arithritisx)
summary(Arthritis)
str(Arthritis)
example(Arthritis)
library(gapminder)
gapminder
poker_vector <- c(140, -50, 20, -120, 240)
names(poker_vector) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
## Define a new variable based on a selection
poker_wednesday <- poker_vector[3]
poker_start <- poker_vector[c("Monday","Tuesday", "Wednesday")]
poker_start
v <- c(96, 66, 147 ,116, 57, 154, 147, 175, 88, 154)
sort(v)
mode(v)
?mode
116+147
263/2
median(v)
mean(v)
154-88
quantile(v)
boxplot(v)
boxplot(v, horizontal = TRUE)
quantile(sort(v))
sdt(v)
?sdt
?sed
?sd
sd(v)
sd(v, na.rm = FALSE)
v <- c(4, 4, 12, 18, 9, 6, 12, 3, 6, 15, 7, 3, 55, 1, 10, 13, 5, 7, 1, 23, 9)
length(v)
v <- sort(v)
v
quantile(v)
boxplot(v, horizontal = TRUE)
??sed
roll <- function() {
die <- 1:6
dice <- sample(die, size = 2, replace = TRUE)
sum(dice)
}
roll
roll()
roll()
replicate(10, roll())
library("ggplot2")
rolls <- replicate(1000, roll())
qplot(rolls, binwidth = 1)
rolls <- replicate(1000, roll())
qplot(rolls, binwidth = 1.5)
rolls <- replicate(1000, roll())
qplot(rolls, binwidth = .5)
rolls <- replicate(1000, roll())
qplot(rolls, binwidth = 10)
rolls <- replicate(1000, roll())
qplot(rolls, binwidth = .1)
rolls <- replicate(1000, roll())
qplot(rolls, binwidth = 1)
# jcpd <- read.csv("D:/CU TC/hudk 4050 data mining/HUDK_4050_data_mining_HW/jcpd-calls-for-service.csv")
# path <- paste("D:/CU TC/hudk 4050 data mining/",
#               "HUDK_4050_data_mining_HW/jcpd-calls-for-service.csv",
#               sep = "")
# jcpd <- read.csv(path)
path2 <- paste(getwd(),
"/jcpd-calls-for-service.csv",
sep = "")
# path2 <- "jcpd-calls-for-service.csv"
jcpd <- read.csv(path2)
old_name <- colnames(jcpd)
new_name <- gsub("[.]", "_", old_name)
names(jcpd) <- new_name
library(dplyr)
unique(jcpd$call_type)
library(dplyr)
# I will use filter to calculate the differnt mean for different call type
# SI <- jcpd %>%
#   filter(call_type == "SI")
# SI_mean <- mean(SI$dispatch_duration)
#
# PH <- jcpd %>%
#   filter(call_type == "PH")
# PH_mean <- mean(PH$dispatch_duration)
#
# C911 <- jcpd %>%
#   filter(call_type == "911")
# mean_911 <- mean(C911$dispatch_duration)
#
# MVS <- jcpd %>%
#   filter(call_type == "MVS")
# MVS_mean <- mean(MVS$dispatch_duration)
#
# STA <- jcpd %>%
#   filter(call_type == "STA")
# STA_mean <- mean(STA$dispatch_duration)
#
# IC <- jcpd %>%
#   filter(call_type == "IC")
# IC_mean <- mean(IC$dispatch_duration)
jcpd %>%
group_by(call_type) %>%
summary(mean(dispatch_duration))
unique(jcpd$call_type)
library(dplyr)
# I will use filter to calculate the differnt mean for different call type
# SI <- jcpd %>%
#   filter(call_type == "SI")
# SI_mean <- mean(SI$dispatch_duration)
#
# PH <- jcpd %>%
#   filter(call_type == "PH")
# PH_mean <- mean(PH$dispatch_duration)
#
# C911 <- jcpd %>%
#   filter(call_type == "911")
# mean_911 <- mean(C911$dispatch_duration)
#
# MVS <- jcpd %>%
#   filter(call_type == "MVS")
# MVS_mean <- mean(MVS$dispatch_duration)
#
# STA <- jcpd %>%
#   filter(call_type == "STA")
# STA_mean <- mean(STA$dispatch_duration)
#
# IC <- jcpd %>%
#   filter(call_type == "IC")
# IC_mean <- mean(IC$dispatch_duration)
jcpd %>%
group_by(call_type) %>%
summarize(mean(dispatch_duration))
receive <- strftime(jcpd$time_received, "%y-%m-%d %H:%M:%S")
dispatch <- strftime(jcpd$time_dispatched, "%y-%m-%d %H:%M:%S")
new_receive <- strptime(receive, "%y-%m-%d %H:%M:%S")
new_dispatch <- strptime(dispatch, "%y-%m-%d %H:%M:%S")
dispatch_duration <- new_dispatch - new_receive
# dispatch_duration
jcpd <- jcpd %>%
mutate(dispatch_duration)
unique(jcpd$call_type)
library(dplyr)
# I will use filter to calculate the differnt mean for different call type
# SI <- jcpd %>%
#   filter(call_type == "SI")
# SI_mean <- mean(SI$dispatch_duration)
#
# PH <- jcpd %>%
#   filter(call_type == "PH")
# PH_mean <- mean(PH$dispatch_duration)
#
# C911 <- jcpd %>%
#   filter(call_type == "911")
# mean_911 <- mean(C911$dispatch_duration)
#
# MVS <- jcpd %>%
#   filter(call_type == "MVS")
# MVS_mean <- mean(MVS$dispatch_duration)
#
# STA <- jcpd %>%
#   filter(call_type == "STA")
# STA_mean <- mean(STA$dispatch_duration)
#
# IC <- jcpd %>%
#   filter(call_type == "IC")
# IC_mean <- mean(IC$dispatch_duration)
jcpd %>%
group_by(call_type) %>%
summarize(mean(jcpd$dispatch_duration))
unique(jcpd$call_type)
library(dplyr)
# I will use filter to calculate the differnt mean for different call type
# SI <- jcpd %>%
#   filter(call_type == "SI")
# SI_mean <- mean(SI$dispatch_duration)
#
# PH <- jcpd %>%
#   filter(call_type == "PH")
# PH_mean <- mean(PH$dispatch_duration)
#
# C911 <- jcpd %>%
#   filter(call_type == "911")
# mean_911 <- mean(C911$dispatch_duration)
#
# MVS <- jcpd %>%
#   filter(call_type == "MVS")
# MVS_mean <- mean(MVS$dispatch_duration)
#
# STA <- jcpd %>%
#   filter(call_type == "STA")
# STA_mean <- mean(STA$dispatch_duration)
#
# IC <- jcpd %>%
#   filter(call_type == "IC")
# IC_mean <- mean(IC$dispatch_duration)
jcpd %>%
group_by(call_type) %>%
summarize(mean(dispatch_duration))
??tidyverse
?tidyverse
typeof(mtcars)
mtcars
# mtcars is a list
mtcars <- data.frame(mtcars)
mtcars
typeof(mtcars)
typeof(mtcars)
typeof(mtcars)
typeof(mtcars)
# mtcars is a list
mtcars <- as.data.frame(mtcars)
typeof(mtcars)
# mtcars is a list
mtcars <- as.data.frame(mtcars)
typeof(mtcars)
# mtcars is a list
mtcars <- data.frame(matrix(unlist(mtcars)))
mtcars
typeof(mtcars)
mtcars
typeof(mtcars)
mtcars
unlist(mtcars)
mtcars
matrix(unlist(mtcars), nrow = length(mtcars), byrow = (mtcars))
matrix(unlist(mtcars), nrow = length(mtcars), byrow = TRUE)
typeof(matrix(unlist(mtcars), nrow = length(mtcars), byrow = TRUE))
data.frame(matrix(unlist(mtcars), nrow = length(mtcars), byrow = TRUE))
typeof(data.frame(matrix(unlist(mtcars), nrow = length(mtcars), byrow = TRUE)))
# mtcars is a list, it is not a data frame yet.
mtcars
# mtcars is a list, it is already a data frame.
mtcars <- data.frame(matrix(unlist(mtcars), nrow = length(mtcars), byrow = TRUE))
mtcars
mtcars
?mtcars
str(mtcars)
?plotmath
library(graphics)
x <- seq(-4, 4, length.out = 101)
y <- cbind(sin(x), cos(y))
y <- cbind(sin(x), cos(x))
matplot(x, y)
plot(x, y)
plot(x)
plot(y)
y
?matplot
matplt(x)
matplot(x)
matplot(y)
matplot(x, y)
llls
acu <- read.csv("D:\CU TC\hudm 5026 intro to R\HUDM5026_R_HW/acupuncture.csv")
acu <- read.csv("D:/CU TC/hudm 5026 intro to R/HUDM5026_R_HW/acupuncture.csv")
getwd()
ls
ls
getwd()
setwd("D:/CU\ TC/hudm\ 5026\ intro\ to\ R/HUDM5026_R_HW")
getwd()
acu <- read.csv("acupuncture.csv")
acu <- read.csv("acupuncture.csv")
acu <- load("acupuncture.RData")
?ls
library(ggplot2)
load("acupuncture.Rdata")
## minimum
min(acupuncture$pk1, na.rm = TRUE)
min(acupuncture$pk5, na.rm = TRUE)
## 1st quantile
quantile(acupuncture$pk1, probs = 0.25)
quantile(acupuncture$pk5, probs = 0.25)
## median
median(acupuncture$pk1, na.rm = TRUE)
median(acupuncture$pk5, na.rm = TRUE)
## 3st quantile
quantile(acupuncture$pk1, probs = 0.75)
quantile(acupuncture$pk5, probs = 0.75)
## maximum
max(acupuncture$pk1, na.rm = TRUE)
max(acupuncture$pk5, na.rm = TRUE)
## @param acu acupuncture
## @return out min, q1st, median, q3st, max
call_out <- function(acu) {
min <- min(acu, na.rm = TRUE)
q1st <- quantile(acu, probs = .25)
median <- quantile(acu, probs = .5)
q3st <- quantile(acu, probs = .75)
max <- max(acu, na.rm = TRUE)
out <- c(min, q1st, median, q3st, max)
out
}
call_out(acupuncture$age)
call_out(acupuncture$sex)
call_out(acupuncture$chronicity)
call_out(acupuncture$pk1)
call_out(acupuncture$pk5)
# by(data = acupuncture$age,
#    INDICES = acupuncture$group,
#    FUN = call_out,
#    na.rm = TRUE)
box_plot <- function(acu) {
min <- min(acu, na.rm = TRUE)
q1st <- quantile(acu, probs = .25)
median <- quantile(acu, probs = .5)
q3st <- quantile(acu, probs = .75)
max <- max(acu, na.rm = TRUE)
out <- c(min, q1st, median, q3st, max)
boxplot(acu, horizontal = TRUE,
xlab = "number",
ylab = "acupuncture pk",
main = "box plot of acupuncture")
abline(v = min, lty = 2)
abline(v = q1st, lty = 2)
abline(v = median, lty = 2)
abline(v = q3st, lty = 2)
abline(v = max, lty = 2)
text(t(out))
print(out)
}
## draw boxplot for pk1
box_plot(acupuncture$pk1)
## draw boxplot for pk5
box_plot(acupuncture$pk5)
acupuncture %>%
select(pk1, pk5) %>%
geom_boxplot()
library(tidyverse)
acupuncture %>%
select(pk1, pk5) %>%
geom_boxplot()
acupuncture %>%
select(pk1, pk5) %>%
geom_boxplot(aes(x = pk1))
acupuncture %>%
select(pk1, pk5) %>%
geom_boxplot(aes(x = .))
geom_boxplot()
acupuncture %>%
select(pk1, pk5) %>%
ggplot(aes(x = .))
acupuncture %>%
select(pk1, pk5) %>%
ggplot(aes(x = pk1))
geom_boxplot()
acupuncture %>%
select(pk1, pk5) %>%
ggplot(aes(x = pk1))
acupuncture %>%
select(pk1, pk5) %>%
ggplot(aes(x = pk1)) %>%
geom_boxplot()
acupuncture %>%
select(pk1, pk5) %>%
ggplot(aes(x = pk1)) +
geom_boxplot()
acupuncture %>%
select(pk1, pk5) %>%
ggplot(aes(x = c(pk1, pk5))) +
geom_boxplot()
acupuncture %>%
select(pk1, pk5) %>%
boxplot()
acupuncture %>%
select(pk1, pk5) %>%
box_plot()
acupuncture %>%
select(pk1, pk5) %>%
boxplot()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
