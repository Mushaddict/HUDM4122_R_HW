pch = c(16, 16, 1, 0)
)
cols <- c("#89ABE3FF", "#EA738DFF")
plot(acu$pk1~ acu$pk5, xlab = "PK1", ylab = "PK5",
col = factor(acu$sex),
pch = acu$group,
main = "baseline headache severity rating vs 1-year headache severity rating")
legend(
x = "bottomright",
legend = c("Group 0", "Group 1", "female", "male"),
title = "Group and Sex",
col = c("red", "black", "black", "black"),
pch = c(16, 16, 1, 0)
)
cols <- c("#89ABE3FF", "#EA738DFF")
plot(acu$pk1~ acu$pk5, xlab = "PK1", ylab = "PK5",
col = factor(acu$sex),
pch = acu$group,
main = "baseline headache severity rating vs 1-year headache severity rating")
legend(
x = "bottomright",
legend = c("Group 0", "Group 1", "male", "female"),
title = "Group and Sex",
col = c("red", "black", "black", "black"),
pch = c(16, 16, 1, 0)
)
cols <- c("#89ABE3FF", "#EA738DFF")
plot(acu$pk1~ acu$pk5, xlab = "PK1", ylab = "PK5",
col = factor(acu$sex),
pch = acu$group,
main = "baseline headache severity rating vs 1-year headache severity rating")
legend(
x = "bottomright",
legend = c("Group 0", "Group 1", "male", "female"),
title = "Group and Sex",
col = c("red", "black", "black", "black"),
pch = c(16, 16, 1, 22)
)
cols <- c("#89ABE3FF", "#EA738DFF")
plot(acu$pk1~ acu$pk5, xlab = "PK1", ylab = "PK5",
col = factor(acu$sex),
pch = acu$group,
main = "baseline headache severity rating vs 1-year headache severity rating")
legend(
x = "bottomright",
legend = c("Group 0", "Group 1", "male", "female"),
title = "Group and Sex",
col = c("red", "black", "black", "black"),
pch = c(16, 16, 1, 0)
)
plot(acu$pk1~ acu$pk5, xlab = "PK1", ylab = "PK5",
col = factor(acu$sex),
pch = acu$group,
main = "baseline headache severity rating vs 1-year headache severity rating")
legend(
x = "bottomright",
legend = c("Group 0", "Group 1", "male", "female"),
title = "Group and Sex",
col = c("red", "black", "black", "black"),
pch = c(16, 16, 1, 0)
)
diff <- acu$pk5 - acu$pk1
acu <- mutate(acu, diff)
diff <- acu$pk5 - acu$pk1
acu <- mutate(acu, diff)
acu$diff
acu <- read.csv("acupuncture.csv")
## mean for each element
apply(acu, MARGIN = 2, mean)
## sd for each element
apply(acu, MARGIN = 2, sd)
by(
data = acu$pk5,
INDICES = acu$group,
FUN = mean
)
## It cannot be concluded about efficacy by only telling the relationship of group and severity of pk5. It needs more information other than groups.
colnames(acu)
diff <- acu$pk5 - acu$pk1
acu <- mutate(acu, diff)
acu$diff
names(acu)
acu <- mutate(acu, remission <- ifelse(diff <= -10, 1, 0))
acu$remission
library(tidyverse)
library(car)
decath <- read.csv("decath.csv")
is_tibble(decath)
## The deacth is not tibble, it returns false when I use is_tibble(), because decath is a data frame.
print(decath)
# print(tbl_df(decath), n = 33)
# print(tbl_df(decath), n = 33)
abs(round(cov(decath), 2))
abs(round(cor(decath), 2))
## covariance of each element of decath
round(cov(decath), 2)
correlation<-round(cor(decath),2)
colname<-colnames(correlation)
rowname<-rownames(correlation)
for (c in 1:10){
for(r in 1:10){
if(abs(correlation[r,c])>0.5){
if(r<c){
print(paste(colname[c],rowname[r],correlation[r,c]),)
}
}
}
}
covariance <-round(cov(decath),2)
correlation<-round(cor(decath),2)
colname<-colnames(correlation)
rowname<-rownames(correlation)
for (c in 1:10){
for(r in 1:10){
if(abs(covariance[r,c])>0.5){
if(r<c){
print(paste(colname[c],rowname[r],covariance[r,c]),)
}
}
}
}
par(mfrow = c(2, 2))
plot(decath$disq, decath$poid,
xlab = "discus", ylab = "shot out")
plot(decath$poid, decath$jave,
xlab = "shot put", ylab = "javelin")
plot(decath$disq, decath$jave,
xlab = "discus", ylab = "javelin")
hist(decath$poid, xlab = "shot put", main = "Histogram of shot put")
## have to install packages for "AMCP"
library(AMCP)
library(tidyverse)
data("C11E19")
dat1 <- C11E19
dat1_long <- dat1 %>%
pivot_longer(cols = Face : White,
names_to = "target",
values_to = "gaze_time")
dat1_long
apply(dat1, 2, mean)
dat1_long %>%
group_by(target) %>%
summarize(mean(gaze_time))
dat1_long %>%
ggplot(aes(x = target, y = gaze_time)) +
geom_boxplot()
library(tidyverse)
aiw <- read_file(file =  "https://www.gutenberg.org/files/11/11-0.txt")
nchar(aiw)
is.vector(nchar(aiw))
length(nchar(aiw))
sprintf("There are %d characters in aiw. ", nchar(aiw))
print("nchar(aiw) is a vector")
sprintf("The vector has a length of %d", length(nchar(aiw)))
str_sub(aiw, end = 3000)
# nchar(str_sub(aiw, start = 1, end = 3000))
# aiw2 <- str_replace_all(aiw, c("\r", "\n"), "-") 不知道为啥不行
## better way:
## aiw2 <- gsub("\r|\n", "",aiw)
aiw2 <- str_replace_all(aiw, c("\r" = "", "\n" = ""))
aiw2
# aiw2 <- str_replace_all(aiw, c("\r", "\n"), "-") 不知道为啥不行
## better way:
## aiw2 <- gsub("\r|\n", "",aiw)
aiw2 <- str_replace_all(aiw, c("\r" = "", "\n" = ""))
## start by :[Illustration]
## end by : THE END
# str_detect(aiw, "[Illustration]")
# str_detect(aiw, "THE END")
start <- str_locate(aiw, "Illustration]")
end <- str_locate(aiw, "THE END")
aiw2 <- str_sub(aiw, start[2] + 1, end[2])
aiw3 <- unlist(str_split(aiw2, " "))
s <- "This is a Big Test"
grepl("^[[:upper:]]+$", s)
str_detect(s, "[[:upper:]]")
sum(str_detect(aiw3, "[[:upper:]]"))
sum(aiw3)
length(aiw3)
3218 / 24618
portion <- sum(str_detect(aiw3, "[[:upper:]]")) / length(aiw3)
portion
str_detect(aiw3, "[:punct:]$")
sum(str_detect(aiw3, "[:punct:]$"))
sum(str_detect(aiw3, "[[:upper:]]"))
portion <- sum(str_detect(aiw3, "[:punct:]$")) / length(aiw3)
portion
aiw3 <- unlist(str_split(aiw2, " "))
portion <- sum(str_detect(aiw3, "[[:upper:]]")) / length(aiw3)
portion
portion <- sum(str_detect(aiw3, "[:punct:]$")) / length(aiw3)
portion
str_detect(aiw3, "[:punct:]$")[21]
aiw3[21]
str_detect(aiw, "mushroom")
str_detect(aiw3, "mushroom")
count(str_detect(aiw3, "mushroom"))
sum(str_detect(aiw3, "mushroom"))
which(str_detect(aiw3, "mushroom"))
have <- which(str_detect(aiw3, "mushroom"))
have[1]
i = i + 1
print_mushroom <- function(aiw) {
}
have <- which(str_detect(aiw3, "mushroom"))
have[1]
i = have[1]
while(!str_detect(aiw3, "\r|\n")) {
print(aiw3[i])
i = i + 1
}
while(!str_detect(aiw3p[i], "\r|\n")) {
print(aiw3[i])
i = i + 1
}
while(!str_detect(aiw3[i], "\r|\n")) {
print(aiw3[i])
i = i + 1
}
print_mushroom <- function(aiw) {
}
have <- which(str_detect(aiw3, "mushroom"))
have[1]
i = have[1]
while(!str_detect(aiw3[i], "\r|\n")) {
print(aiw3[i])
i = i + 1
}
while(!str_detect(aiw3[i], "\r|\n")) {
print(aiw3[i])
i = i - 1
}
print_mushroom <- function(aiw) {
}
have <- which(str_detect(aiw3, "mushroom"))
have[1]
i = have[1]
while(!str_detect(aiw3[i], "\r|\n")) {
print(aiw3[i])
i = i + 1
}
i = have[1]
while(!str_detect(aiw3[i], "\r|\n")) {
print(aiw3[i])
i = i - 1
}
aiw3[8177]
aiw3[8178]
aiw_fen <- unlist(str_split(aiw, " "))
which(str_detect(aiw_fen, "mushroom"))
aiw_fen[8287]
aiw_fen[8288]
aiw_fen[8286]
aiw_fen[8297]
aiw_fen[8324]
aiw_fen[8328]
aiw_fen[8330]
str_detect(aiw_fen, "\r\n\r")
which(str_detect(aiw_fen, "\r\n\r"))
aiw_fen[12]
aiw_fen[87]
str_detect(aiw_fen, "I.")
which(str_detect(aiw_fen, "I."))
aiw_fen[63]
while(!str_detect(aiw3[i], "\r\n\r")) {
print(aiw3[i])
i = i + 1
}
print_mushroom <- function(aiw) {
}
have <- which(str_detect(aiw3, "mushroom"))
have[1]
i = have[1]
while(!str_detect(aiw3[i], "\r\n\r")) {
i = i + 1
print(aiw3[i])
}
i = have[1]
# while(!str_detect(aiw3[i], "\r|\n")) {
#   print(aiw3[i])
#   i = i - 1
# }
rnr <- str_split(aiw, "\r\n\r")
length(rnr)
rnr
sum(rnr)
rnr[1]
rnr <- unlist(str_split(aiw, "\r\n\r"))
length(rnr)
for (item in rnr) {
if(str_detect(rnr[item], "mushrrom")) {
paste(rnr[item])
}
}
if(str_detect(rnr[item], "mushroom")) {
paste(rnr[item])
}
str_detect(rnr[1], "mushrrom")
str_detect(rnr[1], "mushroom")
for(item in rnr) {
print(item)
}
length(rnr)
item  = 1
while(item < length(rnr)) {
if(str_detect(rnr[item], "mushroom")) {
paste(rnr[item])
}
}
while(item < length(rnr)) {
if(str_detect(rnr[item], "mushroom")) {
paste(rnr[item])
}
item = item + 1
}
vec <- []
vec <- c[]
vec <- c()
have <- which(str_detect(aiw3, "mushroom"))
have[1]
i = have[1]
vec <- c()
while(!str_detect(aiw3[i], "\r\n\r")) {
i = i + 1
vec <- cbind(vec, i)
print(aiw3[i])
}
have <- which(str_detect(aiw3, "mushroom"))
have[1]
i = have[1]
vec <- c(i)
while(!str_detect(aiw3[i], "\r\n\r")) {
i = i + 1
vec <- cbind(vec, i)
# print(aiw3[i])
}
i = have[1]
while(!str_detect(aiw[i], "\r\n\r")) {
i = i - 1
vec <- cbind(i, vec)
}
have <- which(str_detect(aiw3, "mushroom"))
have[1]
i = have[1]
vec <- c(i)
while(!str_detect(aiw3[i], "\r\n\r")) {
i = i + 1
vec <- cbind(vec, i)
# print(aiw3[i])
}
i = have[1]
while(!str_detect(aiw3[i], "\r\n\r")) {
i = i - 1
vec <- cbind(i, vec)
}
i = have[1]
item  = 1
while(item < length(rnr)) {
if(str_detect(rnr[item], "mushroom")) {
paste(rnr[item])
}
item = item + 1
}
vec
i = have[1]
i
paste(aiw3[vec])
aiw3[vec]
list(aiw3[vec])
print_mush_surr <- function(index) {
i = have[index]
vec <- c(i)
while(!str_detect(aiw3[i], "\r\n\r")) {
i = i + 1
vec <- cbind(vec, i)
# print(aiw3[i])
}
i = have[1]
while(!str_detect(aiw3[i], "\r\n\r")) {
i = i - 1
vec <- cbind(i, vec)
}
}
print_mush_surr <- function(index) {
i = have[index]
vec <- c(i)
while(!str_detect(aiw3[i], "\r\n\r")) {
i = i + 1
vec <- cbind(vec, i)
# print(aiw3[i])
}
i = have[1]
while(!str_detect(aiw3[i], "\r\n\r")) {
i = i - 1
vec <- cbind(i, vec)
}
paste(aiw3[vec])
}
print_mush_surr(i)
for(i in have) {
print_mush_surr(i)
}
print_mush_surr <- function(index) {
i = have[index]
vec <- c(i)
while(!str_detect(aiw3[i], "\r\n\r")) {
i = i + 1
vec <- cbind(vec, i)
# print(aiw3[i])
}
i = have[index]
while(!str_detect(aiw3[i], "\r\n\r")) {
i = i - 1
vec <- cbind(i, vec)
}
paste(aiw3[vec])
}
for(i in have) {
print_mush_surr(i)
}
for(i in have) {
print(i)
}
print_mush_surr <- function(index) {
i = index
vec <- c(i)
while(!str_detect(aiw3[i], "\r\n\r")) {
i = i + 1
vec <- cbind(vec, i)
# print(aiw3[i])
}
i = index
while(!str_detect(aiw3[i], "\r\n\r")) {
i = i - 1
vec <- cbind(i, vec)
}
paste(aiw3[vec])
}
for(i in have) {
print_mush_surr(i)
}
print_mush_surr <- function(index) {
i = index
vec <- c(i)
while(!str_detect(aiw3[i], "\r\n\r")) {
i = i + 1
vec <- cbind(vec, i)
# print(aiw3[i])
}
i = index
while(!str_detect(aiw3[i], "\r\n\r")) {
i = i - 1
vec <- cbind(i, vec)
}
cat(paste(aiw3[vec]))
}
for(i in have) {
print_mush_surr(i)
}
length(have)
print_mush_surr <- function(index) {
i = index                                # i pointer to index
vec <- c(i)                              # put i in the vector
while(!str_detect(aiw3[i], "\r\n\r")) {  # find the last word of the paragraph
i = i + 1                              # i++
vec <- cbind(vec, i)                   # append i in the vector
}
i = index                                # i pointer again
while(!str_detect(aiw3[i], "\r\n\r")) {  # find the last word of the paragraph
i = i - 1                              # i--
vec <- cbind(i, vec)                   # append i in front of the vector
}
cat(paste(aiw3[vec]))                    # print out
}
#############################################################################
#######################   function above   ##################################
#############################################################################
have <- which(str_detect(aiw3, "mushroom"))
sprintf("There are %s mushrooms in the book", length(have))
for(i in have) {
print_mush_surr(i)
}
print_mush_surr <- function(index) {
i = index                                # i pointer to index
vec <- c(i)                              # put i in the vector
while(!str_detect(aiw3[i], "\r\n\r")) {  # find the last word of the paragraph
i = i + 1                              # i++
vec <- cbind(vec, i)                   # append i in the vector
}
i = index                                # i pointer again
while(!str_detect(aiw3[i], "\r\n\r")) {  # find the last word of the paragraph
i = i - 1                              # i--
vec <- cbind(i, vec)                   # append i in front of the vector
}
cat(paste(aiw3[vec]))                    # print out
cat("\n")
}
#############################################################################
#######################   function above   ##################################
#############################################################################
have <- which(str_detect(aiw3, "mushroom"))
sprintf("There are %s mushrooms in the book", length(have))
for(i in have) {
print_mush_surr(i)
}
str_replace_all(aiw, "mushroom", "apple")
change <- str_replace_all(aiw, "mushroom", "apple")
str_view(change, "apple")
change <- str_replace_all(aiw, "mushroom", "apple")
str_view(change, "apple")
change <- str_replace_all(aiw, "mushroom", "apple")
str_view(change, "apple")
